define(['app/base', 'marked', 'picker'], function(GildersApp, marked, filepicker) {
  var NewCourseController;
  filepicker.setKey("AbTiwTQQyRk64Q0iOoQHrz");
  NewCourseController = (function() {
    function NewCourseController($scope, FirebaseService, $window, $sce, $routeParams, $rootScope, $timeout) {
      var height1, height2, runOnce;
      $scope.courseKey = $routeParams.courseId;
      runOnce = null;
      $scope.writingDisabled = true;
      $scope.actives = {};
      FirebaseService.rootRef.child("courses/" + $routeParams.courseId).on("value", function(snap) {
        return setTimeout(function() {
          $scope.$apply(function() {
            $scope.course = snap.val();
            if (!runOnce) {
              $scope.courseName = snap.val().name;
            }
            if (!runOnce) {
              $scope.layout = true;
            }
            return runOnce = true;
          });
          return $('.contains-tooltip').tooltip();
        }, 1000);
      });
      $scope.resetContents = function() {
        $scope.content.markdown = '';
        $scope.content.html = '';
        $scope.content.html = '';
        $scope.chapterName = {};
        return $scope.actives = {};
      };
      $scope.checkIfEnabled = function() {
        if (!$scope.actives.project) {
          $rootScope.modalHeader = 'No Project Selected';
          $rootScope.modalContent = $sce.trustAsHtml('You need to select a project to start writing.');
          $rootScope.modalButtonText = 'Close';
          $rootScope.enableModal = true;
          return $rootScope.onModalButtonClick = function(e) {
            e.preventDefault();
            return $rootScope.enableModal = false;
          };
        }
      };
      $scope.addLesson = function(unitKey) {
        $rootScope.modalHeader = 'New Lesson';
        $rootScope.modalContent = $sce.trustAsHtml('Enter a name for your new lesson: <br><br> <input name="name" type="text" placeholder="Lesson Name" class="lesson-name form-control bor"/>');
        $rootScope.modalButtonText = 'Create';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          var lessRef;
          e.preventDefault();
          if ($(".lesson-name").val().trim().length > 0) {
            lessRef = FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons").push();
            lessRef.set({
              name: $(".lesson-name").val().trim()
            });
            $rootScope.enableModal = false;
            $scope.actives = {
              unit: unitKey,
              lesson: lessRef.key()
            };
            return $scope.lessonName = $(".lesson-name").val().trim();
          }
        };
      };
      $scope.addUnit = function() {
        var unitRef;
        $scope.creatingUnit = true;
        unitRef = FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units").push();
        return unitRef.set({
          name: "New Unit"
        }, function() {
          return $scope.creatingUnit = false;
        });
      };
      $scope.addProject = function(unitKey, lessonKey) {
        $rootScope.modalHeader = 'New Section';
        $rootScope.modalContent = $sce.trustAsHtml('Enter a name for your new section: <br><br> <input name="name" type="text" placeholder="Section Name" class="project-name form-control bor"/>');
        $rootScope.modalButtonText = 'Create';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          var projRef;
          e.preventDefault();
          if ($(".project-name").val().trim().length > 0) {
            projRef = FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects").push();
            projRef.set({
              name: $(".project-name").val().trim(),
              isText: true
            });
            $rootScope.enableModal = false;
            $scope.actives = {
              unit: unitKey,
              lesson: lessonKey,
              project: projRef.key()
            };
            return $scope.projectName = $(".project-name").val().trim();
          }
        };
      };
      $scope.delUnit = function(unitKey) {
        $rootScope.modalHeader = 'Delete Unit';
        $rootScope.modalContent = "Are you sure?";
        $rootScope.modalButtonText = 'Delete';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          e.preventDefault();
          FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey).set(null);
          $rootScope.enableModal = false;
          return $scope.resetContents();
        };
      };
      $scope.delLesson = function(unitKey, lessonKey) {
        $rootScope.modalHeader = 'Delete Lesson';
        $rootScope.modalContent = "Are you sure?";
        $rootScope.modalButtonText = 'Delete';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          e.preventDefault();
          FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey).set(null);
          $rootScope.enableModal = false;
          return $scope.resetContents();
        };
      };
      $scope.delProject = function(unitKey, lessonKey, projectKey) {
        $rootScope.modalHeader = 'Delete Project';
        $rootScope.modalContent = "Are you sure?";
        $rootScope.modalButtonText = 'Delete';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          e.preventDefault();
          FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey).set(null);
          $rootScope.enableModal = false;
          return $scope.resetContents();
        };
      };
      $scope.saveUnitName = function(unitName, unitKey) {
        return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/name").set(unitName);
      };
      $scope.saveLessonName = function(unitKey, lessonKey, lessonName) {
        return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/name").set(lessonName);
      };
      $scope.saveProjectName = function(unitKey, lessonKey, projectKey, name) {
        return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/name").set(name);
      };
      $scope.openProject = function(unitKey, lessonKey, projectKey, projectName) {
        $scope.makeLiActive = projectKey;
        $scope.actives = {
          unit: unitKey,
          lesson: lessonKey,
          project: projectKey
        };
        $scope.content.markdown = $scope.course.units[unitKey].lessons[lessonKey].projects[projectKey].markdown || "";
        $scope.content.html = $sce.trustAsHtml(marked($scope.course.units[unitKey].lessons[lessonKey].projects[projectKey].html || "", {
          sanitize: false
        }));
        if (projectName.trim().length !== 0) {
          $scope.projectName = projectName;
        }
        return $scope.writingDisabled = false;
      };
      $scope.toggleSubmissions = function(unitKey, lessonKey, projectKey, submissions) {
        console.log(unitKey, lessonKey, projectKey, submissions);
        return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/enableSubmissions").set(!submissions);
      };
      $scope.$watch('content.markdown', function(newVal, oldVal) {
        if (newVal) {
          if ($scope.actives.unit && $scope.actives.lesson && $scope.actives.project) {
            return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + $scope.actives.unit + "/lessons/" + $scope.actives.lesson + "/projects/" + $scope.actives.project + "/markdown").set(newVal.toString());
          }
        }
      });
      $scope.$watch('content.html', function(newVal, oldVal) {
        if (newVal) {
          if ($scope.actives.unit && $scope.actives.lesson && $scope.actives.project) {
            return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + $scope.actives.unit + "/lessons/" + $scope.actives.lesson + "/projects/" + $scope.actives.project + "/html").set(newVal.toString());
          }
        }
      });
      $scope.$watch('courseName', function(newVal, oldVal) {
        if (newVal) {
          if (newVal !== oldVal) {
            return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/name").set(newVal);
          }
        }
      });
      $scope.windowHeight = 0;
      $scope.windowHeight = $window.outerHeight + 'px';
      $scope.minHeight = 0;
      height1 = angular.element(document.getElementById('write-column'))[0].offsetHeight;
      height2 = angular.element(document.getElementById('preview-column'))[0].offsetHeight;
      $scope.minHeight = height1 > height2 ? height1 + 'px' : height2 + 'px';
      $scope.content = {};
      $scope.getMarked = function($event) {
        if ($scope.content.markdown) {
          return $scope.content.html = $sce.trustAsHtml(marked($scope.content.markdown, {
            sanitize: false
          }));
        } else {
          return $scope.content.html = marked('');
        }
      };
      $scope.setInstallment = function(installmentNo, unitKey, currentNum) {
        if (currentNum === installmentNo) {
          return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/installmentNo").set(null);
        } else {
          return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/installmentNo").set(installmentNo);
        }
      };
      $scope.markWalkThrough = function(unitKey, lessonKey, projectKey) {
        FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/isWalkThrough").set(true);
        FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/isProject").set(null);
        return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/isText").set(null);
      };
      $scope.markProject = function(unitKey, lessonKey, projectKey) {
        FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/isWalkThrough").set(null);
        FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/isProject").set(true);
        return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/isText").set(null);
      };
      $scope.markText = function(unitKey, lessonKey, projectKey) {
        FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/isWalkThrough").set(null);
        FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/isProject").set(null);
        return FirebaseService.rootRef.child("courses/" + $scope.courseKey + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey + "/isText").set(true);
      };
    }

    return NewCourseController;

  })();
  NewCourseController.$inject = ["$scope", "FirebaseService", "$window", "$sce", "$routeParams", "$rootScope", "$timeout"];
  GildersApp.controller('NewCourseController', NewCourseController);
  return NewCourseController;
});

//# sourceMappingURL=data:application/json;base64,
