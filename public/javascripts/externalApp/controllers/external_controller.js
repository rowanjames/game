define(['externalApp/base', 'angularjs', 'fbase'], function(AngApp) {
  var ExternalController;
  ExternalController = (function() {
    function ExternalController($scope, FirebaseService, $window, $timeout) {
      filepicker.setKey('A1LP338CwSuaNoitK6IHVz');
      $scope.showCreatePane = true;
      $scope.showPlayPane = false;
      $scope.createPaneOne = true;
      $scope.resetHeights = function() {
        var stepHeight;
        $scope.paneHeightNumber = $window.innerHeight - document.querySelector('.top-bar-menu').offsetHeight;
        $scope.paneHeight = $scope.paneHeightNumber + 'px';
        stepHeight = ($scope.paneHeightNumber / 2) - 40 + 'px';
        $scope.stepStyle = {
          'max-height': stepHeight,
          'min-height': stepHeight,
          overflow: 'scroll'
        };
        $scope.appStyle = {
          'max-height': $window.innerHeight + 'px',
          'min-height': $window.innerHeight + 'px',
          overflow: 'scroll'
        };
        return $scope.paneStyle = {
          'max-height': $scope.paneHeight,
          'min-height': $scope.paneHeight,
          overflow: 'scroll'
        };
      };
      console.log($scope.paneHeightNumber);
      console.log($scope.paneHeight);
      $scope.resetHeights();
      $scope.togglePane = function(str) {
        if (str === 'Create') {
          $scope.showPlayPane = false;
          return $timeout(function() {
            return $scope.showCreatePane = true;
          }, 500);
        } else if (str === 'Play') {
          $scope.showCreatePane = false;
          return $timeout(function() {
            return $scope.showPlayPane = true;
          }, 500);
        }
      };
      $scope.toggleCreatePane = function(str) {
        if (str === 1) {
          $scope.createPaneOne = false;
          $timeout(function() {
            return $scope.createPaneTwo = true;
          }, 500);
          return $scope.uploadFile();
        } else if (str === 2) {
          $scope.createPaneTwo = false;
          return $timeout(function() {
            return $scope.createPaneOne = true;
          }, 500);
        }
      };
      $scope.uploadFile = function() {
        $scope.showDropPane = true;
        return filepicker.makeDropPane(document.getElementById('drop-pane'), {
          multiple: false,
          dragEnter: function() {
            var obj;
            obj = document.getElementById('drop-pane');
            return obj.style.backgroundColor = '#eee';
          },
          dragLeave: function() {
            var obj;
            obj = document.getElementById('drop-pane');
            return obj.style.backgroundColor = '#fff';
          },
          onSuccess: function(Blobs) {
            console.log(JSON.stringify(Blobs));
            console.log(Blobs);
            return $timeout(function() {
              $scope.showDropPane = false;
              $scope.showImagePreview = true;
              $scope.previewUrl = Blobs[0].url;
              return $timeout(function() {
                return $scope.resetHeights();
              }, 1000);
            });
          },
          onStart: function(files) {
            return console.log(files);
          },
          onError: function(type, message) {
            var obj;
            alert('There was an error in uploading your file!');
            obj = document.getElementById('drop-pane-reply');
            return obj.style.backgroundColor = '#fff';
          },
          onProgress: function(percentage) {
            var obj;
            document.getElementById('drop-pane').style.backgroundColor = '#fff';
            obj = document.getElementById('progress-attachments');
            return obj.style.width = percentage + "%";
          }
        });
      };
    }

    return ExternalController;

  })();
  ExternalController.$inject = ["$scope", "FirebaseService", "$window", "$timeout"];
  AngApp.controller('ExternalController', ExternalController);
  return ExternalController;
});

//# sourceMappingURL=data:application/json;base64,
