define(['externalApp/base', 'angularjs', 'fbase'], function(AngApp) {
  var ExternalController;
  ExternalController = (function() {
    function ExternalController($scope, FirebaseService, $window, $timeout, Upload, $sce) {
      filepicker.setKey('A1LP338CwSuaNoitK6IHVz');
      $scope.showCreatePane = true;
      $scope.showPlayPane = false;
      $scope.createPaneOne = true;
      $scope.zoomable = false;
      $scope.createFile = null;
      $scope.resetHeights = function() {
        var stepHeight;
        $scope.paneHeightNumber = $window.innerHeight - document.querySelector('.top-bar-menu').offsetHeight;
        $scope.paneHeight = $scope.paneHeightNumber + 'px';
        stepHeight = ($scope.paneHeightNumber / 2) - 40 + 'px';
        $scope.stepStyle = {
          'max-height': stepHeight,
          'min-height': stepHeight,
          overflow: 'scroll'
        };
        $scope.appStyle = {
          'max-height': $window.innerHeight + 'px',
          'min-height': $window.innerHeight + 'px',
          overflow: 'scroll'
        };
        return $scope.paneStyle = {
          'max-height': $scope.paneHeight,
          'min-height': $scope.paneHeight,
          overflow: 'scroll'
        };
      };
      console.log($scope.paneHeightNumber);
      console.log($scope.paneHeight);
      $scope.resetHeights();
      $scope.$watch('createFile', function() {
        if ($scope.createFile !== null) {
          return $scope.upload($scope.createFile);
        }
      });
      $scope.upload = function(file) {
        return Upload.upload({
          url: 'http://mosaiced.nodelabs.in/upload',
          data: {
            file: file
          }
        }).progress(function(evt) {
          var obj, progressPercentage;
          progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
          obj = document.getElementById('progress-attachments');
          return obj.style.width = progressPercentage + "%";
        }).success(function(data, status, headers, config) {
          if (data.success) {
            return $timeout(function() {
              var img;
              $scope.showDropPane = false;
              $scope.showImagePreview = true;
              $scope.previewUrl = data.url;
              img = new Image();
              img.onload = function() {
                return $timeout(function() {
                  $scope.previewUrlHeight = img.height + 'px';
                  return $scope.previewUrlWidth = img.width + 'px';
                });
              };
              return img.src = $scope.previewUrl;
            });
          }
        });
      };
      $scope.removeImagePreview = function() {
        var obj;
        $scope.showDropPane = true;
        $scope.showImagePreview = null;
        $scope.previewUrl = null;
        $scope.previewUrlHeight = null;
        $scope.previewUrlWidth = null;
        obj = document.getElementById('progress-attachments');
        return obj.style.width = "0%";
      };
      $scope.togglePane = function(str) {
        if (str === 'Create') {
          $scope.showPlayPane = false;
          return $timeout(function() {
            return $scope.showCreatePane = true;
          }, 500);
        } else if (str === 'Play') {
          $scope.showCreatePane = false;
          return $timeout(function() {
            return $scope.showPlayPane = true;
          }, 500);
        }
      };
      $scope.toggleCreatePane = function(str) {
        if (str === 1) {
          $scope.createPaneOne = false;
          $timeout(function() {
            return $scope.createPaneTwo = true;
          }, 500);
          return $scope.showDropPane = true;
        } else if (str === 2) {
          if ($scope.previewUrl) {
            $scope.createPaneTwo = false;
            return $timeout(function() {
              $scope.createPaneThree = true;
              console.log($scope.previewUrl);
              console.log($scope.previewUrlHeight);
              console.log($scope.previewUrlWidth);
              return $scope.createImageStyle = {
                'background-image': "url(" + $scope.previewUrl + ")",
                'background-size': 'contain',
                'background-repeat': 'no-repeat',
                'width': '100%',
                'height': $scope.previewUrlHeight
              };
            }, 500);
          } else {
            return alert('Please choose an image first.');
          }
        } else if (str === 3) {
          $scope.createPaneThree = false;
          return $scope.createPaneTwo = true;
        }
      };
      $scope.previewCanvasClick = function(event) {
        var left, style, top, x, y;
        console.log(event);
        console.log(event.offsetX);
        console.log(event.offsetY);
        y = event.offsetY;
        x = event.offsetX;
        style = "position:absolute;top:" + y + "px;left:" + x + "px";
        console.log(style);
        $scope.dotHtml = $sce.trustAsHtml("<i class='icon-circle text-primary' style=" + style + " ng-click='yo($event)'>");
        top = y - 20 + 'px';
        left = x + 40 + 'px';
        return $scope.createQuestionBoxStyle = {
          'top': top,
          left: left
        };
      };
      $scope.yo = function(event) {
        return console.log(event);
      };
      $scope.uploadFile = function() {
        $scope.showDropPane = true;
        return filepicker.makeDropPane(document.getElementById('drop-pane'), {
          multiple: false,
          dragEnter: function() {
            var obj;
            obj = document.getElementById('drop-pane');
            return obj.style.backgroundColor = '#eee';
          },
          dragLeave: function() {
            var obj;
            obj = document.getElementById('drop-pane');
            return obj.style.backgroundColor = '#fff';
          },
          onSuccess: function(Blobs) {
            console.log(JSON.stringify(Blobs));
            console.log(Blobs);
            return $timeout(function() {
              var img;
              $scope.showDropPane = false;
              $scope.showImagePreview = true;
              $scope.previewUrl = Blobs[0].url;
              img = new Image();
              img.onload = function() {
                return $timeout(function() {
                  $scope.previewUrlHeight = img.height + 'px';
                  return $scope.previewUrlWidth = img.width + 'px';
                });
              };
              img.src = $scope.previewUrl;
              return $timeout(function() {
                return $scope.resetHeights();
              }, 1000);
            });
          },
          onStart: function(files) {
            return console.log(files);
          },
          onError: function(type, message) {
            var obj;
            alert('There was an error in uploading your file!');
            obj = document.getElementById('drop-pane-reply');
            return obj.style.backgroundColor = '#fff';
          },
          onProgress: function(percentage) {
            var obj;
            document.getElementById('drop-pane').style.backgroundColor = '#fff';
            obj = document.getElementById('progress-attachments');
            return obj.style.width = percentage + "%";
          }
        });
      };
    }

    return ExternalController;

  })();
  ExternalController.$inject = ["$scope", "FirebaseService", "$window", "$timeout", "Upload", "$sce"];
  AngApp.controller('ExternalController', ExternalController);
  return ExternalController;
});

//# sourceMappingURL=data:application/json;base64,
