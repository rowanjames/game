define(['externalApp/base', 'angularjs', 'fbase'], function(AngApp) {
  var SignupController;
  SignupController = (function() {
    function SignupController($scope, FirebaseService, $timeout, $firebaseArray) {
      if (FirebaseService.authData) {
        window.location = '/app';
      } else {
        $scope.user = {};
        $scope.alertInfo = {
          spinner: false,
          alert: false
        };
        $scope.batchesIndex = $firebaseArray(FirebaseService.rootRef.child("batches/index"));
        $scope.notifyEmail = null;
        $scope.validBatches = [];
        $scope.getLength = function(obj) {
          if (obj) {
            return Object.keys(obj).length;
          } else {
            return 0;
          }
        };
        $scope.batchesIndex.$loaded(function(x) {
          if (x) {
            return $timeout(function() {
              $scope.batchesIndexLoaded = true;
              angular.forEach($scope.batchesIndex, function(v, k) {
                if ($scope.getLength(v.students) < v.studentLimit) {
                  return $scope.validBatches.push($scope.batchesIndex[k]);
                }
              });
              return $scope.selectedBatch = $scope.validBatches[0];
            });
          }
        });
        $scope.changeBatch = function(batch) {
          return $scope.selectedBatch = batch;
        };
        $scope.getNotified = function(notifyEmail) {
          if (notifyEmail) {
            FirebaseService.rootRef.child("notifyEmails").push().set({
              email: notifyEmail
            });
            $scope.alertInfo = {
              showNotifyThanks: true
            };
            return $scope.notifyEmail = null;
          }
        };
        $scope.createNewUser = function(newUserForm) {
          var theEmail;
          if (newUserForm.$valid) {
            $scope.alertInfo = {
              spinner: true,
              alert: false
            };
            theEmail = $scope.user.email;
            return FirebaseService.rootRef.createUser({
              email: theEmail,
              password: $scope.user.password
            }, function(error, userData) {
              var usrRef;
              if (error) {
                console.log(error);
                switch (error.code) {
                  case 'EMAIL_TAKEN':
                    return $scope.$apply(function() {
                      return $scope.alertInfo = {
                        spinner: false,
                        alert: true,
                        alertMsg: "The email is already in use."
                      };
                    });
                  case 'INVALID_EMAIL':
                    return $scope.$apply(function() {
                      return $scope.alertInfo = {
                        spinner: false,
                        alert: true,
                        alertMsg: "The specified email is not a valid email."
                      };
                    });
                  default:
                    return $scope.$apply(function() {
                      return $scope.alertInfo = {
                        spinner: false,
                        alert: true,
                        alertMsg: "Error: " + error
                      };
                    });
                }
              } else {
                usrRef = FirebaseService.rootRef.child("users/" + userData.uid);
                usrRef.child('basic').set({
                  userType: 'student',
                  authData: userData,
                  firstName: $scope.user.firstName,
                  lastName: $scope.user.lastName,
                  email: theEmail,
                  createdAt: moment().unix()
                });
                usrRef.child("batches/index").push().set({
                  courseId: $scope.selectedBatch.courseId,
                  mentorId: $scope.selectedBatch.mentorId,
                  batchId: $scope.selectedBatch.$id
                });
                FirebaseService.rootRef.child("batches/" + $scope.selectedBatch.courseId + "/" + $scope.selectedBatch.mentorId + "/" + $scope.selectedBatch.$id + "/students/" + (usrRef.key())).set({
                  firstName: $scope.user.firstName,
                  lastName: $scope.user.lastName,
                  studentId: usrRef.key()
                });
                FirebaseService.rootRef.child("batches/index/" + $scope.selectedBatch.$id + "/students/" + (usrRef.key())).set({
                  firstName: $scope.user.firstName,
                  lastName: $scope.user.lastName,
                  studentId: usrRef.key()
                });
                usrRef.setPriority(theEmail);
                return FirebaseService.rootRef.authWithPassword({
                  'email': theEmail,
                  'password': $scope.user.password
                }, function(error, authData) {
                  if (error) {
                    console.log(error);
                    return $scope.alertInfo = {
                      spinner: false,
                      alert: true,
                      alertMsg: "Your account was created but there was a problem signing in. Please try to sign in again from the sign in page."
                    };
                  } else {
                    console.log('Authenticated successfully with payload:', authData);
                    FirebaseService.authData = authData;
                    return window.location = '/app';
                  }
                });
              }
            });
          }
        };
      }
    }

    return SignupController;

  })();
  SignupController.$inject = ["$scope", "FirebaseService", "$timeout", "$firebaseArray"];
  AngApp.controller('SignupController', SignupController);
  return SignupController;
});

//# sourceMappingURL=data:application/json;base64,
