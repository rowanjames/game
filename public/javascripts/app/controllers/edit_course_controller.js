define(['app/base', 'marked', 'picker'], function(AngApp, marked, filepicker) {
  var EditCourseController;
  filepicker.setKey("AbTiwTQQyRk64Q0iOoQHrz");
  EditCourseController = (function() {
    function EditCourseController($scope, $window, $sce, $routeParams, $rootScope, $timeout) {
      $scope.editCourse = {
        content: {}
      };
      $scope.bootEdit = function(course, unitKey, lessonKey, projectKey, unitIndex, lessonIndex, projectIndex) {
        var _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
        $scope.editCourse.course = course;
        $scope.editCourse.unitKey = unitKey;
        $scope.editCourse.lessonKey = lessonKey;
        $scope.editCourse.projectKey = projectKey;
        $scope.editCourse.unitIndex = unitIndex;
        $scope.editCourse.lessonIndex = lessonIndex;
        $scope.editCourse.projectIndex = projectIndex;
        $scope.editCourse.content.html = $sce.trustAsHtml(((_ref = $scope.editCourse.course.units) != null ? (_ref1 = _ref[unitKey]) != null ? (_ref2 = _ref1.lessons) != null ? (_ref3 = _ref2[lessonKey]) != null ? (_ref4 = _ref3.projects) != null ? (_ref5 = _ref4[projectKey]) != null ? _ref5.html : void 0 : void 0 : void 0 : void 0 : void 0 : void 0) || '', {
          sanitize: false
        });
        $scope.editCourse.content.markdown = ((_ref6 = $scope.editCourse.course.units) != null ? (_ref7 = _ref6[unitKey]) != null ? (_ref8 = _ref7.lessons) != null ? (_ref9 = _ref8[lessonKey]) != null ? (_ref10 = _ref9.projects) != null ? (_ref11 = _ref10[projectKey]) != null ? _ref11.markdown : void 0 : void 0 : void 0 : void 0 : void 0 : void 0) || '';
        return $timeout(function() {
          $scope.paneHeightNumber = $window.innerHeight - document.querySelector('nav').offsetHeight - document.querySelector('.mentor-dashboard').offsetHeight - document.querySelector('.courses-tab-option-dashboard').offsetHeight;
          $scope.paneHeight = $scope.paneHeightNumber + 'px';
          $scope.paneStyle = {
            'max-height': $scope.paneHeight,
            'min-height': $scope.paneHeight
          };
          $scope.editPaneHeightNumber = $scope.paneHeightNumber - document.querySelector('.edit-pane-options').offsetHeight;
          $scope.editPaneHeight = $scope.editPaneHeightNumber - 5 + 'px';
          $scope.editPaneStyle = {
            'max-height': $scope.editPaneHeight,
            'min-height': $scope.editPaneHeight
          };
          $scope.menuPaneHeightNumber = $scope.paneHeightNumber - document.querySelector('.menu-pane-options').offsetHeight;
          $scope.menuPaneHeight = $scope.menuPaneHeightNumber + 'px';
          return $scope.menuPaneStyle = {
            'max-height': $scope.menuPaneHeight,
            'min-height': $scope.menuPaneHeight
          };
        }, 100);
      };
      $scope.editCourse.convertMarked = function() {
        $rootScope.rootRef.child("courses/" + $scope.editCourse.course.$id + "/units/" + $scope.editCourse.unitKey + "/lessons/" + $scope.editCourse.lessonKey + "/projects/" + $scope.editCourse.projectKey + "/markdown").set($scope.editCourse.content.markdown);
        $rootScope.rootRef.child("courses/" + $scope.editCourse.course.$id + "/units/" + $scope.editCourse.unitKey + "/lessons/" + $scope.editCourse.lessonKey + "/projects/" + $scope.editCourse.projectKey + "/html").set(marked($scope.editCourse.content.markdown || "", {
          sanitize: false
        }));
        return $scope.editCourse.content.html = $sce.trustAsHtml(marked($scope.editCourse.content.markdown || "", {
          sanitize: false
        }));
      };
      $scope.editCourse.changeProject = function(unitKey, lessonKey, projectKey, unitIndex, lessonIndex, projectIndex) {
        $scope.editCourse.unitKey = unitKey;
        $scope.editCourse.lessonKey = lessonKey;
        $scope.editCourse.projectKey = projectKey;
        $scope.editCourse.unitIndex = unitIndex;
        $scope.editCourse.lessonIndex = lessonIndex;
        $scope.editCourse.projectIndex = projectIndex;
        $scope.editCourse.content.html = $sce.trustAsHtml($scope.editCourse.course.units[unitKey].lessons[lessonKey].projects[projectKey].html || '', {
          sanitize: false
        });
        return $scope.editCourse.content.markdown = $scope.editCourse.course.units[unitKey].lessons[lessonKey].projects[projectKey].markdown || '';
      };
      $scope.editCourse.onChangeNames = function(newVal) {
        $scope.editCourse.course.$save();
        return $rootScope.rootRef.child("courses/index/" + $scope.editCourse.course.$id + "/name").set($scope.editCourse.course.name);
      };
      $scope.editCourse.addUnit = function() {
        var unitRef;
        $scope.editCourse.creatingUnit = true;
        unitRef = $rootScope.rootRef.child("courses/" + $scope.editCourse.course.$id + "/units").push();
        return unitRef.set({
          name: "New Unit"
        }, function() {
          return $scope.$apply(function() {
            return $scope.editCourse.creatingUnit = false;
          });
        });
      };
      $scope.editCourse.addLesson = function(unitKey) {
        $rootScope.modalHeader = 'New Lesson';
        $rootScope.modalContent = $sce.trustAsHtml('Enter a name for your new lesson: <br><br> <input name="name" type="text" placeholder="Lesson Name" class="lesson-name form-control bor"/>');
        $rootScope.modalButtonText = 'Create';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          var lessRef;
          e.preventDefault();
          if ($(".lesson-name").val().trim().length > 0) {
            lessRef = $rootScope.rootRef.child("courses/" + $scope.editCourse.course.$id + "/units/" + unitKey + "/lessons").push();
            lessRef.set({
              name: $(".lesson-name").val().trim()
            });
            return $rootScope.enableModal = false;
          }
        };
      };
      $scope.editCourse.addProject = function(unitKey, lessonKey) {
        $rootScope.modalHeader = 'New Project';
        $rootScope.modalContent = $sce.trustAsHtml('Enter a name for your new project: <br><br> <input name="name" type="text" placeholder="Project Name" class="project-name form-control bor"/>');
        $rootScope.modalButtonText = 'Create';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          var projRef;
          e.preventDefault();
          if ($(".project-name").val().trim().length > 0) {
            projRef = $rootScope.rootRef.child("courses/" + $scope.editCourse.course.$id + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects").push();
            projRef.set({
              name: $(".project-name").val().trim(),
              isText: true
            });
            return $rootScope.enableModal = false;
          }
        };
      };
      $scope.editCourse.deleteProject = function(unitKey, lessonKey, projectKey) {
        $rootScope.modalHeader = 'Delete Project';
        $rootScope.modalContent = $sce.trustAsHtml('Are you sure?');
        $rootScope.modalButtonText = 'Delete';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          e.preventDefault();
          $rootScope.rootRef.child("courses/" + $scope.editCourse.course.$id + "/units/" + unitKey + "/lessons/" + lessonKey + "/projects/" + projectKey).set(null);
          return $rootScope.enableModal = false;
        };
      };
      $scope.editCourse.deleteLesson = function(unitKey, lessonKey) {
        $rootScope.modalHeader = 'Delete Lesson';
        $rootScope.modalContent = $sce.trustAsHtml('Are you sure?');
        $rootScope.modalButtonText = 'Delete';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          e.preventDefault();
          $rootScope.rootRef.child("courses/" + $scope.editCourse.course.$id + "/units/" + unitKey + "/lessons/" + lessonKey).set(null);
          return $rootScope.enableModal = false;
        };
      };
      $scope.editCourse.deleteUnit = function(unitKey) {
        $rootScope.modalHeader = 'Delete Unit';
        $rootScope.modalContent = $sce.trustAsHtml('Are you sure?');
        $rootScope.modalButtonText = 'Delete';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          e.preventDefault();
          $rootScope.rootRef.child("courses/" + $scope.editCourse.course.$id + "/units/" + unitKey).set(null);
          return $rootScope.enableModal = false;
        };
      };
    }

    return EditCourseController;

  })();
  EditCourseController.$inject = ["$scope", "$window", "$sce", "$routeParams", "$rootScope", "$timeout"];
  AngApp.controller('EditCourseController', EditCourseController);
  return EditCourseController;
});

//# sourceMappingURL=data:application/json;base64,
