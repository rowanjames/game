define(['app/base', 'angularjs', 'fbase'], function(MailerApp) {
  var SettingsController;
  SettingsController = (function() {
    function SettingsController($scope, FirebaseService, $rootScope) {
      var height1, height2;
      $scope.minHeight = 0;
      height1 = angular.element(document.getElementById('options-panel'))[0].offsetHeight;
      height2 = angular.element(document.getElementById('details-panel'))[0].offsetHeight;
      $scope.minHeight = height1 > height2 ? height1 + 'px' : height2 + 'px';
      $scope.activeTabs = {
        profile: true,
        settings: false,
        headerTxt: "Profile"
      };
      $rootScope.$watch('userBasic', function(newVal, oldVal) {
        if ($rootScope.userBasic) {
          return $scope.user = {
            firstName: $rootScope.userBasic.firstName,
            lastName: $rootScope.userBasic.lastName,
            profile: $rootScope.userBasic.profile
          };
        }
      });
      $scope.profileBox = function($event) {
        $event.preventDefault();
        return $scope.activeTabs = {
          profile: true,
          settings: false,
          headerTxt: "Profile"
        };
      };
      $scope.settingsBox = function($event) {
        $event.preventDefault();
        return $scope.activeTabs = {
          profile: false,
          settings: true,
          headerTxt: "Account Settings"
        };
      };
      $scope.updateProfile = function(theForm) {
        if (theForm.$valid) {
          $scope.savingProfile = true;
          $rootScope.currentUserRef.child('basic/firstName').set($scope.user.firstName);
          $rootScope.currentUserRef.child('basic/lastName').set($scope.user.lastName, function() {
            return $scope.$apply(function() {
              return $scope.savingProfile = false;
            });
          });
          if ($scope.user.profile) {
            return $rootScope.currentUserRef.child('basic/profile').set($scope.user.profile);
          }
        }
      };
      $scope.alertInfo = {};
      $scope.getObjLength = function(obj) {
        if (obj) {
          return Object.keys(obj).length;
        } else {
          return 0;
        }
      };
      $scope.updatePassword = function(pwdForm) {
        if (pwdForm.$valid) {
          $scope.alertInfo = {
            spinner: true,
            alert: false,
            alertMsg: ''
          };
          return $rootScope.rootRef.changePassword({
            email: $rootScope.userBasic.email,
            oldPassword: $scope.user.oldPassword,
            newPassword: $scope.user.newPassword
          }, function(error) {
            if (error) {
              switch (error.code) {
                case 'INVALID_PASSWORD':
                  $scope.$apply(function() {
                    return $scope.alertInfo = {
                      spinner: false,
                      alert: true,
                      alertMsg: 'The specified password is incorrect.'
                    };
                  });
                  break;
                case 'INVALID_USER':
                  $scope.$apply(function() {
                    return $scope.alertInfo = {
                      spinner: false,
                      alert: true,
                      alertMsg: 'The specified user account does not exist.'
                    };
                  });
                  break;
                default:
                  $scope.$apply(function() {
                    return $scope.alertInfo = {
                      spinner: false,
                      alert: true,
                      alertMsg: "Error changing password: " + error
                    };
                  });
              }
            } else {
              $scope.$apply(function() {
                return $scope.alertInfo = {
                  spinner: false,
                  alert: true,
                  alertMsg: 'User password changed successfully!'
                };
              });
            }
          });
        }
      };
      $scope.delAcc = function(delAccForm) {
        if (delAccForm.$valid) {
          $scope.alertDel = {
            spinner: true,
            alert: false,
            alertMsg: ''
          };
          console.log($rootScope.userBasic.email);
          console.log($scope.user.currentPwd);
          $scope.delAccMsg = true;
          $scope.delAlert = false;
          $scope.delMsg = null;
          return $rootScope.rootRef.removeUser({
            email: $rootScope.userBasic.email,
            password: $scope.user.currentPwd
          }, function(error) {
            console.log(error);
            if (error) {
              return $scope.$apply(function() {
                $scope.delAlert = true;
                $scope.delMsg = error.code;
                return $scope.delAccMsg = false;
              });
            } else {
              $scope.$apply(function() {
                $scope.delAccMsg = false;
                $scope.delAlert = false;
                return $scope.delMsg = null;
              });
              $rootScope.currentUserRef.set(null);
              $rootScope.child("secondaryIndexes/users/" + ($rootScope.currentUserRef.key())).set(null);
              return window.location.reload();
            }
          });
        }
      };
    }

    return SettingsController;

  })();
  SettingsController.$inject = ["$scope", "FirebaseService", "$rootScope"];
  MailerApp.controller('SettingsController', SettingsController);
  return SettingsController;
});

//# sourceMappingURL=data:application/json;base64,
