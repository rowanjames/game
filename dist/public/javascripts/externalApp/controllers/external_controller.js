define(['externalApp/base', 'angularjs', 'fbase'], function(AngApp) {
  var ExternalController;
  AngApp.directive('compile', [
    '$compile', function($compile) {
      return function(scope, element, attrs) {
        scope.$watch((function(scope) {
          return scope.$eval(attrs.compile);
        }), function(value) {
          element.html(value);
          $compile(element.contents())(scope);
        });
      };
    }
  ]);
  ExternalController = (function() {
    function ExternalController($scope, FirebaseService, $window, $timeout, Upload, $sce, $compile, $firebaseArray, $firebaseObject, $interval) {
      filepicker.setKey('A1LP338CwSuaNoitK6IHVz');
      $scope.zoomable = false;
      $scope.createFile = null;
      $scope.dotHtml = '';
      $scope.gamesIndex = $firebaseArray(FirebaseService.rootRef.child('indexes/categories'));
      $scope.createGameRef = FirebaseService.rootRef.child('games').push();
      $scope.stepStates = {
        stepOne: true,
        stepTwo: false,
        stepThree: false
      };
      $scope._ = _;
      $scope.resetHeights = function() {
        var stepHeight;
        $scope.paneHeightNumber = $window.innerHeight - document.querySelector('.top-bar-menu').offsetHeight;
        $scope.paneHeight = $scope.paneHeightNumber + 'px';
        stepHeight = ($scope.paneHeightNumber / 2) - 40 + 'px';
        $scope.stepStyle = {
          'max-height': stepHeight,
          'min-height': stepHeight,
          overflow: 'scroll'
        };
        $scope.appStyle = {
          'max-height': $window.innerHeight + 'px',
          'min-height': $window.innerHeight + 'px',
          overflow: 'scroll'
        };
        return $scope.paneStyle = {
          'max-height': $scope.paneHeight,
          'min-height': $scope.paneHeight,
          overflow: 'scroll'
        };
      };
      $scope.resetHeights();
      $scope.$watch('createFile', function() {
        if ($scope.createFile !== null) {
          return $scope.upload($scope.createFile);
        }
      });
      $scope.upload = function(file) {
        return Upload.upload({
          url: window.location.origin + '/upload',
          data: {
            file: file
          }
        }).progress(function(evt) {
          var progressPercentage;
          progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
          return $scope.progressStyle = {
            'width': progressPercentage + "%"
          };
        }).success(function(data, status, headers, config) {
          if (data.success) {
            return $timeout(function() {
              $scope.createGameRef.child('image').set(data.url);
              return $scope.previewUrl = data.url;
            });
          }
        });
      };
      $scope.removeImagePreview = function() {
        $scope.previewUrl = null;
        $scope.progressStyle = {
          'width': '0%'
        };
        $scope.createGameRef.child('image').set(null);
        return true;
      };
      $scope.togglePane = function(pane) {
        if (pane === 'Create') {
          $scope.showPlayPane = false;
          $scope.showCreatePane = true;
          return $scope.activeCreatePane = 'start';
        } else if (pane === 'Play') {
          $scope.showPlayPane = true;
          $scope.showCreatePane = false;
          $scope.playGameOptions = true;
          return $scope.playGameScreen = false;
        }
      };
      $scope.togglePane('Play');
      $scope.nextCreatePane = function(pane) {
        if (pane === 'start') {
          if ($scope.createGameName && $scope.activeCreateCategory) {
            FirebaseService.rootRef.child("indexes/categories/" + $scope.activeCreateCategory.$id + "/games/" + ($scope.createGameRef.key())).set({
              name: $scope.createGameName,
              live: false
            });
            $scope.stepStates.stepTwo = true;
            $scope.activeCreatePane = 'upload';
            $scope.createGameDots = $firebaseArray($scope.createGameRef.child('dots'));
            return $scope.createGameSync = $firebaseObject($scope.createGameRef);
          }
        } else if (pane === 'upload') {
          if ($scope.previewUrl) {
            $scope.activeCreatePane = 'mark';
            return alert('Please click on the image and add questions now');
          } else {
            return alert('Please choose an image first.');
          }
        } else if (pane === 'mark') {
          if ($scope.createGameDots.length > 0) {
            $scope.stepStates.stepThree = true;
            return $scope.activeCreatePane = 'settings';
          } else {
            return alert('Please add atleast 1 question.');
          }
        }
      };
      $scope.prevCreatePane = function(pane) {
        if (pane === 'upload') {
          $scope.stepStates = {
            stepOne: true,
            stepTwo: false,
            stepThree: false
          };
          return $scope.activeCreatePane = 'start';
        } else if (pane === 'mark') {
          return $scope.activeCreatePane = 'upload';
        } else if (pane === 'settings') {
          $scope.stepStates = {
            stepOne: true,
            stepTwo: true,
            stepThree: false
          };
          return $scope.activeCreatePane = 'mark';
        }
      };
      $scope.previewCanvasClick = function(event) {
        var left, ref, top, x, y;
        y = event.offsetY;
        x = event.offsetX;
        $scope.createGameQuestion = null;
        top = y - 20 + 'px';
        left = x + 40 + 'px';
        $scope.createQuestionBoxStyle = {
          'top': top,
          left: left
        };
        ref = $scope.createGameRef.child('dots').push();
        ref.set({
          x: x,
          y: y
        });
        return $scope.createGameActiveDotId = ref.key();
      };
      $scope.changeDot = function(dot) {
        var left, top, x, y;
        $scope.createGameQuestion = null;
        $scope.createGameActiveDotId = dot.$id;
        $scope.createGameQuestion = dot.question;
        y = dot.y;
        x = dot.x;
        top = y - 20 + 'px';
        left = x + 40 + 'px';
        return $scope.createQuestionBoxStyle = {
          'top': top,
          left: left
        };
      };
      $scope.addQuestion = function() {
        $scope.createGameRef.child("dots/" + $scope.createGameActiveDotId + "/question").set($scope.createGameQuestion);
        return $scope.createQuestionBoxStyle = null;
      };
      $scope.removeQuestion = function() {
        $scope.createGameRef.child("dots/" + $scope.createGameActiveDotId).set(null);
        $scope.createGameQuestion = null;
        return $scope.createQuestionBoxStyle = null;
      };
      $scope.setCreateOptions = function(option, val, text) {
        return $scope.createGameRef.child("settings/" + option).set({
          val: val,
          text: text
        });
      };
      $scope.finishCreate = function() {
        if ($scope.createGameSync.settings) {
          if ($scope.createGameSync.settings.chances) {
            if ($scope.createGameSync.settings.timer) {
              FirebaseService.rootRef.child("indexes/categories/" + $scope.activeCreateCategory.$id + "/games/" + ($scope.createGameRef.key()) + "/live").set(true);
              $scope.togglePane('Play');
              $scope.activeCreatePane = 'start';
              $scope.createGameName = null;
              $scope.activeCreateCategory = null;
              $scope.createGameRef = FirebaseService.rootRef.child('games').push();
              return $scope.createQuestionBoxStyle = null;
            } else {
              return alert('Please complete the settings');
            }
          } else {
            return alert('Please complete the settings');
          }
        } else {
          return alert('Please complete the settings');
        }
      };
      $scope.changeCreateCategory = function(category) {
        return $scope.activeCreateCategory = category;
      };
      $scope.changePlayCategory = function(category) {
        return $scope.activePlayCategory = category;
      };
      $scope.changePlayGame = function(game, gameId) {
        $scope.activePlayGame = game;
        return $scope.activePlayGameId = gameId;
      };
      $scope.triggerGameScreen = function() {
        if ($scope.activePlayCategory && $scope.activePlayGame) {
          $scope.playGameOptions = false;
          $scope.playGameScreen = true;
          $scope.playGameRef = FirebaseService.rootRef.child("games/" + $scope.activePlayGameId);
          $scope.playGameSync = $firebaseObject($scope.playGameRef);
          $scope.miliCounter = 0;
          $scope.secCounter = 0;
          $scope.minCounter = 0;
          return $scope.playGameSync.$loaded(function(x) {
            if (x) {
              return $timeout(function() {
                var questions;
                questions = [];
                $scope.guessesLeft = Object.keys($scope.playGameSync.dots).length;
                angular.forEach($scope.playGameSync.dots, function(val, key) {
                  return questions.push({
                    key: key,
                    val: val
                  });
                });
                $scope.questionsArray = _.shuffle(questions);
                $scope.questionsArrayLength = questions.length;
                $scope.answersArray = [];
                $scope.correctScore = 0;
                $scope.wrongScore = 0;
                return $scope.answerPercent = 0;
              });
            }
          });
        }
      };
      $scope.triggerGameOptions = function() {
        $scope.playGameOptions = true;
        $scope.playGameScreen = false;
        $scope.playGameRef = null;
        if ($scope.playGameSync) {
          return $scope.playGameSync.$destroy();
        }
      };
      $scope.bootGame = function() {
        $scope.gameOn = true;
        $scope.miliPromise = $interval(function() {
          if ($scope.miliCounter === 9) {
            return $scope.miliCounter = 0;
          } else {
            return $scope.miliCounter = $scope.miliCounter + 1;
          }
        }, 100);
        $scope.secPromise = $interval(function() {
          if ($scope.secCounter === 59) {
            $scope.secCounter = 0;
          } else {
            $scope.secCounter = $scope.secCounter + 1;
          }
          return $scope.evalTimerSettings();
        }, 1000);
        return $scope.minPromise = $interval(function() {
          return $scope.minCounter = $scope.minCounter + 1;
        }, 60000);
      };
      $scope.disableModal = function() {
        return $scope.enableModal = false;
      };
      $scope.evalTimerSettings = function() {
        var currentSeconds, theVal;
        theVal = parseInt($scope.playGameSync.settings.timer.val) / 1000;
        currentSeconds = $scope.minCounter * 60 + $scope.secCounter;
        if (theVal === currentSeconds) {
          $interval.cancel($scope.miliPromise);
          $interval.cancel($scope.secPromise);
          $interval.cancel($scope.minPromise);
          $scope.uniqueCode = Math.random().toString(36).slice(2).toUpperCase();
          return $scope.enableModal = true;
        }
      };
      $scope.evalDot = function(dot, dotId) {
        if (!_.contains($scope.answersArray, dotId)) {
          if (dotId === $scope.questionsArray[0].key) {
            $scope.correctScore = $scope.correctScore + 1;
            $scope.guessesLeft = $scope.guessesLeft - 1;
            $scope.questionsArray.splice(0, 1);
            $scope.answersArray.push(dotId);
          } else {
            $scope.wrongScore = $scope.wrongScore + 1;
          }
          $scope.answerPercent = (($scope.correctScore / ($scope.correctScore + $scope.wrongScore)) * 100).toFixed(2);
          if ($scope.questionsArray.length === 0) {
            $interval.cancel($scope.miliPromise);
            $interval.cancel($scope.secPromise);
            $interval.cancel($scope.minPromise);
            $scope.uniqueCode = Math.random().toString(36).slice(2).toUpperCase();
            $scope.enableModal = true;
          }
        }
        return $scope.evalChanceSettings();
      };
      $scope.evalChanceSettings = function() {
        if ($scope.playGameSync.settings.chances.val === 'asMany') {
          if ($scope.questionsArrayLength === $scope.correctScore + $scope.wrongScore) {
            $interval.cancel($scope.miliPromise);
            $interval.cancel($scope.secPromise);
            $interval.cancel($scope.minPromise);
            $scope.uniqueCode = Math.random().toString(36).slice(2).toUpperCase();
            return $scope.enableModal = true;
          }
        } else if ($scope.playGameSync.settings.chances.val === 'firstWrong') {
          if ($scope.wrongScore === 1) {
            $interval.cancel($scope.miliPromise);
            $interval.cancel($scope.secPromise);
            $interval.cancel($scope.minPromise);
            $scope.uniqueCode = Math.random().toString(36).slice(2).toUpperCase();
            return $scope.enableModal = true;
          }
        } else if ($scope.playGameSync.settings.chances.val === 'secondWrong') {
          if ($scope.wrongScore === 2) {
            $interval.cancel($scope.miliPromise);
            $interval.cancel($scope.secPromise);
            $interval.cancel($scope.minPromise);
            $scope.uniqueCode = Math.random().toString(36).slice(2).toUpperCase();
            return $scope.enableModal = true;
          }
        } else if ($scope.playGameSync.settings.chances.val === 'thirdWrong') {
          if ($scope.wrongScore === 3) {
            $interval.cancel($scope.miliPromise);
            $interval.cancel($scope.secPromise);
            $interval.cancel($scope.minPromise);
            $scope.uniqueCode = Math.random().toString(36).slice(2).toUpperCase();
            return $scope.enableModal = true;
          }
        }
      };
      $scope.submitScore = function(scoreFirstName, scoreLastName) {
        var totalTime;
        if (scoreFirstName && scoreLastName) {
          totalTime = Math.floor(Math.random() * 600) + 1;
          FirebaseService.rootRef.child("scores/" + $scope.activePlayGameId).push().set({
            uniqueCode: $scope.uniqueCode,
            totalTime: totalTime,
            firstName: scoreFirstName,
            lastName: scoreLastName,
            correct: $scope.correctScore,
            wrong: $scope.correctScore,
            answerPercent: $scope.answerPercent
          });
          if ($scope.wrongScore === 0) {
            FirebaseService.rootRef.child("topScores/" + $scope.activePlayGameId).push().set({
              uniqueCode: $scope.uniqueCode,
              totalTime: totalTime,
              firstName: scoreFirstName,
              lastName: scoreLastName,
              correct: $scope.correctScore,
              wrong: $scope.correctScore,
              answerPercent: $scope.answerPercent
            });
            FirebaseService.rootRef.child("uniqueCodeReference/" + $scope.uniqueCode).set({
              uniqueCode: $scope.uniqueCode,
              totalTime: totalTime,
              firstName: scoreFirstName,
              lastName: scoreLastName,
              correct: $scope.correctScore,
              wrong: $scope.correctScore,
              answerPercent: $scope.answerPercent
            });
          }
          $scope.showScores = true;
          return $scope.currentHighScores = $firebaseArray(FirebaseService.rootRef.child("topScores/" + $scope.activePlayGameId).orderByChild('totalTime').limitToFirst(10));
        }
      };
      $scope.playAgain = function() {
        $scope.gameOn = false;
        $scope.enableModal = false;
        return $scope.triggerGameScreen();
      };
      $scope.gameMenu = function() {
        $scope.gameOn = false;
        $scope.enableModal = false;
        return $scope.triggerGameOptions();
      };
    }

    return ExternalController;

  })();
  ExternalController.$inject = ["$scope", "FirebaseService", "$window", "$timeout", "Upload", "$sce", "$compile", "$firebaseArray", "$firebaseObject", "$interval"];
  AngApp.controller('ExternalController', ExternalController);
  return ExternalController;
});

//# sourceMappingURL=data:application/json;base64,
