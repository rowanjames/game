define(['angularjs', 'angularroute', 'basefileupload', 'sanitize', 'anganimate', 'tagsip', 'elasticjs', 'fbase', 'afire', 'fbutils'], function(angular, route, basefileupload, sanitize, anganimate, tagsip, elastic, Firebase, afire, fbutils) {
  var AngApp;
  AngApp = angular.module('angApp', ['ngRoute', 'naif.base64', 'ngSanitize', 'ngAnimate', 'ngTagsInput', 'monospaced.elastic', 'firebase']).config([
    '$routeProvider', function($routeProvider) {
      $routeProvider.when('/', {
        template: '<div class="row text-center ng-cloak"><div class="col-md-12"></div><i class="icon-spin5 animate-spin text-dark-gray"></i> <span class="text-dark-gray">Loading...</span></div>',
        controller: [
          "$location", "$rootScope", function($location, $rootScope) {
            return $location.path($rootScope.rootPath);
          }
        ]
      });
      $routeProvider.when('/student', {
        templateUrl: "/javascripts/app/templates/student/dashboard.html",
        controller: 'StudentController'
      });
      $routeProvider.when('/mentor', {
        templateUrl: "/javascripts/app/templates/mentor/dashboard.html",
        controller: 'MentorController'
      });
      return $routeProvider.when('/mentor/courses/:courseId/edit', {
        templateUrl: "/javascripts/app/templates/edit-course.html",
        controller: 'NewCourseController'
      });
    }
  ]);
  AngApp.run([
    "$rootScope", "$location", "FirebaseService", "$route", "$timeout", "$firebaseArray", "$firebaseObject", function($rootScope, $location, FirebaseService, $route, $timeout, $firebaseArray, $firebaseObject) {
      var auth;
      $rootScope.location = $location;
      $rootScope.authLoaded = false;
      auth = FirebaseService.rootRef.getAuth();
      $rootScope.rootRef = FirebaseService.rootRef;
      $rootScope.$on('$locationChangeSuccess', function() {
        $rootScope.location = window.location.pathname;
        return $rootScope.locationHash = window.location.hash;
      });
      $rootScope.disableModal = function() {
        return $rootScope.enableModal = false;
      };
      if (auth) {
        $rootScope.currentUid = auth.uid;
        return $rootScope.rootRef.child("users/" + auth.uid + "/basic").once("value", function(snap) {
          return $rootScope.$apply(function() {
            $rootScope.userBasic = snap.val();
            $rootScope.userBatchesIndex = $firebaseArray($rootScope.rootRef.child("users/" + auth.uid + "/batches/index"));
            $rootScope.userBasicName = snap.val().firstName + ' ' + snap.val().lastName;
            $rootScope.currentUserRef = $rootScope.rootRef.child("users/" + auth.uid);
            $rootScope.authLoaded = true;
            $rootScope.dashHref = "#/" + $rootScope.userBasic.userType;
            $rootScope.rootHref = "#/" + $rootScope.userBasic.userType;
            return $location.path("/" + $rootScope.userBasic.userType);
          });
        });
      } else {
        return window.location = '/sign-in';
      }
    }
  ]);
  angular.element(document).ready(function() {
    return angular.bootstrap(document, ['angApp'], {
      strictDi: true
    });
  });
  return AngApp;
});

//# sourceMappingURL=data:application/json;base64,
