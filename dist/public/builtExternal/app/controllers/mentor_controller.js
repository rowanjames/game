define(['app/base', 'angularjs', 'fbase'], function(AngApp) {
  var MentorController;
  MentorController = (function() {
    function MentorController($scope, FirebaseService, $window, $timeout, $firebaseObject, $firebaseArray, $rootScope, $sce, $location) {
      $scope.coursesTab = {};
      $scope.batchesTab = {};
      $scope.layoutTab = {};
      $scope.appointmentsTab = {};
      $scope.paymentsTab = {};
      $scope.guildsTab = {};
      $scope.coursesTab.boot = function() {
        $scope.selectedTab = 'COURSES';
        $scope.coursesTab.activePane = 'Overview';
        $scope.tpl = "javascripts/app/templates/mentor/courses.html";
        if ($scope.coursesTab.coursesIndex) {
          $scope.coursesTab.coursesIndex.$destroy();
        }
        $scope.coursesTab.coursesIndex = $firebaseArray($rootScope.currentUserRef.child("courses/index"));
        return $scope.coursesTab.coursesIndex.$loaded(function(x) {
          if (x.length > 0) {
            $scope.coursesTab.changeCourse($scope.coursesTab.coursesIndex[0]);
          }
          $scope.paneHeightNumber = $window.innerHeight - document.querySelector('nav').offsetHeight - document.querySelector('.mentor-dashboard').offsetHeight - document.querySelector('.courses-tab-option-dashboard').offsetHeight;
          $scope.paneHeight = $scope.paneHeightNumber + 'px';
          return $scope.paneStyle = {
            'max-height': $scope.paneHeight,
            'min-height': $scope.paneHeight
          };
        });
      };
      $scope.coursesTab.boot();
      $scope.getFirstKey = function(obj) {
        if (obj) {
          return Object.keys(obj)[0];
        }
      };
      $scope.coursesTab.changeCourse = function(course) {
        if (course) {
          if ($scope.coursesTab.currentCourse) {
            $scope.coursesTab.currentCourse.$destroy();
          }
          $scope.coursesTab.currentCourse = $firebaseObject($rootScope.rootRef.child("courses/" + course.$id));
          return $scope.coursesTab.currentCourse.$loaded(function(x) {
            var firstLessonKey, firstProjectKey, firstUnitKey;
            if (x) {
              firstUnitKey = $scope.getFirstKey(course.units);
              if (firstUnitKey) {
                firstLessonKey = $scope.getFirstKey(course.units[firstUnitKey].lessons);
                if (firstLessonKey) {
                  $scope.coursesTab.lessonKey = firstLessonKey;
                  firstProjectKey = $scope.getFirstKey(course.units[firstUnitKey].lessons[firstLessonKey].projects);
                  if (firstProjectKey) {
                    $scope.coursesTab.projectKey = firstProjectKey;
                    return $scope.coursesTab.changeProject(firstUnitKey, firstLessonKey, firstProjectKey, 1, 1, 1);
                  } else {
                    $scope.coursesTab.projectHtml = '';
                    return $scope.coursesTab.resetKeys();
                  }
                } else {
                  $scope.coursesTab.projectHtml = '';
                  return $scope.coursesTab.resetKeys();
                }
              } else {
                $scope.coursesTab.projectHtml = '';
                return $scope.coursesTab.resetKeys();
              }
            }
          });
        }
      };
      $scope.coursesTab.changeProject = function(unitKey, lessonKey, projectKey, unitIndex, lessonIndex, projectIndex) {
        $scope.coursesTab.unitKey = unitKey;
        $scope.coursesTab.lessonKey = lessonKey;
        $scope.coursesTab.projectKey = projectKey;
        $scope.coursesTab.unitIndex = unitIndex;
        $scope.coursesTab.lessonIndex = lessonIndex;
        $scope.coursesTab.projectIndex = projectIndex;
        return $scope.coursesTab.projectHtml = $sce.trustAsHtml($scope.coursesTab.currentCourse.units[$scope.coursesTab.unitKey].lessons[$scope.coursesTab.lessonKey].projects[$scope.coursesTab.projectKey].html);
      };
      $scope.coursesTab.resetKeys = function() {
        $scope.coursesTab.unitKey = null;
        $scope.coursesTab.lessonKey = null;
        $scope.coursesTab.projectKey = null;
        $scope.coursesTab.unitIndex = null;
        $scope.coursesTab.lessonIndex = null;
        return $scope.coursesTab.projectIndex = null;
      };
      $scope.coursesTab.addNewCourse = function() {
        $rootScope.modalHeader = 'New Course';
        $rootScope.modalContent = $sce.trustAsHtml('Enter a name for your new course: <br><br> <input name="name" type="text" placeholder="Course Name" class="course-name form-control bor"/>');
        $rootScope.modalButtonText = 'Create';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          var course, courseCode, courseName, lessonRef, projectRef, ref, unitRef;
          e.preventDefault();
          $rootScope.enableModal = false;
          courseName = document.querySelector('.course-name').value.trim();
          if (courseName.length > 0) {
            ref = $rootScope.rootRef.child('courses').push();
            courseCode = Math.random().toString(36).substring(10).toUpperCase();
            ref.setWithPriority({
              courseCode: courseCode,
              name: courseName
            }, courseName);
            ref.child("members/" + $rootScope.currentUid).set({
              memberId: $rootScope.currentUid
            });
            unitRef = ref.child('units').push();
            unitRef.set({
              name: 'A Unit'
            });
            lessonRef = unitRef.child('lessons').push();
            lessonRef.set({
              name: 'A Lesson'
            });
            projectRef = lessonRef.child("projects").push();
            projectRef.set({
              name: 'A Project'
            });
            $rootScope.currentUserRef.child("courses/index/" + (ref.key())).set({
              courseId: ref.key(),
              courseName: courseName
            });
            $rootScope.rootRef.child("courses/index/" + (ref.key())).setWithPriority({
              courseCode: courseCode,
              name: courseName
            }, courseName);
            course = {};
            course['$id'] = ref.key();
            return $scope.coursesTab.changeCourse(course);
          }
        };
      };
      $scope.coursesTab.deleteCourse = function() {
        $rootScope.modalHeader = 'Delete Course';
        $rootScope.modalContent = $sce.trustAsHtml('Are you sure?');
        $rootScope.modalButtonText = 'Delete';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          e.preventDefault();
          if ($scope.coursesTab.currentCourse) {
            $scope.coursesTab.currentCourse.$destroy();
          }
          $timeout(function() {
            $rootScope.rootRef.child("courses/" + $scope.coursesTab.currentCourse.$id).set(null);
            $rootScope.rootRef.child("users/" + $rootScope.currentUid + "/courses/index/" + $scope.coursesTab.currentCourse.$id).set(null);
            return $rootScope.rootRef.child("courses/index/" + $scope.coursesTab.currentCourse.$id).set(null);
          }, 100);
          $rootScope.enableModal = false;
          return $scope.coursesTab.boot();
        };
      };
      $scope.batchesTab.boot = function() {
        $scope.coursesTab.coursesIndex = $firebaseArray($rootScope.rootRef.child("courses/index"));
        return $scope.batchesTab.coursesIndex.$loaded(function(x) {
          var timeLater, timeNow;
          if (x) {
            $scope.batchesTab.changeCourse($scope.batchesTab.coursesIndex[0]);
            $scope.batchesTab.paneHeightNumber = $window.innerHeight - document.querySelector('nav').offsetHeight - document.querySelector('.mentor-dashboard').offsetHeight - document.querySelector('.batches-tab-option-dashboard').offsetHeight;
            $scope.batchesTab.paneHeight = $scope.batchesTab.paneHeightNumber + 'px';
            $scope.batchesTab.paneStyle = {
              'max-height': $scope.batchesTab.paneHeight,
              'min-height': $scope.batchesTab.paneHeight
            };
            $scope.batchesTab.selectedTab = 'CURRENT BATCHES';
            timeNow = moment();
            timeLater = moment().add(3, 'months');
            return $scope.batchesTab.newBatchModel = {
              startDate: timeNow.toDate(),
              endDate: timeLater.toDate(),
              studentLimit: 1
            };
          }
        });
      };
      $scope.batchesTab.changeCourse = function(course) {
        console.log(course);
        if ($scope.batchesTab.currentBatches) {
          $scope.batchesTab.currentBatches.$destroy();
        }
        if ($scope.batchesTab.currentCourse) {
          $scope.batchesTab.currentCourse.$destroy();
        }
        if ($scope.batchesTab.finishedBatches) {
          $scope.batchesTab.finishedBatches.$destroy();
        }
        $scope.batchesTab.currentBatches = $firebaseArray($rootScope.rootRef.child("batches/" + course.$id + "/" + $rootScope.currentUid).startAt('CURRENT').endAt('CURRENT'));
        $scope.batchesTab.finishedBatches = $firebaseArray($rootScope.rootRef.child("batches/" + course.$id + "/" + $rootScope.currentUid).startAt('FINISHED').endAt('FINISHED'));
        return $scope.batchesTab.currentCourse = $firebaseObject($rootScope.rootRef.child("courses/" + course.$id));
      };
      $scope.batchesTab.createBatch = function(startDate, endDate, newBatchForm) {
        var batchCode, batchRef;
        if (newBatchForm.$valid) {
          $scope.showNewBatchFormSpinner = true;
          batchRef = $rootScope.rootRef.child("batches/" + $scope.batchesTab.currentCourse.$id + "/" + $rootScope.currentUid).push();
          batchCode = Math.random().toString(36).substring(10).toUpperCase();
          $rootScope.currentUserRef.child("batches/index").push().set({
            batchCode: batchCode,
            courseId: $scope.batchesTab.currentCourse.$id,
            mentorId: $rootScope.currentUid,
            batchId: batchRef.key()
          });
          return batchRef.setWithPriority({
            batchCode: batchCode,
            status: 'NEW',
            mentorId: $rootScope.currentUid,
            mentorName: $rootScope.userBasic.firstName + " " + $rootScope.userBasic.lastName,
            courseId: $scope.batchesTab.currentCourse.$id,
            courseName: $scope.batchesTab.currentCourse.name,
            startDate: new moment($scope.batchesTab.newBatchModel.startDate).format('MMMM Do YYYY'),
            endDate: new moment($scope.batchesTab.newBatchModel.endDate).format('MMMM Do YYYY'),
            studentLimit: $scope.batchesTab.newBatchModel.studentLimit
          }, 'CURRENT', function() {
            return $timeout(function() {
              $scope.showNewBatchFormSpinner = false;
              return $scope.batchesTab.selectedTab = 'CURRENT BATCHES';
            });
          });
        }
      };
      $scope.batchesTab.changeStatus = function(batch, status) {
        var batchObj;
        console.log(batch);
        console.log(status);
        if (status === batch.status) {
          $rootScope.rootRef.child("batches/" + batch.courseId + "/" + batch.mentorId + "/" + batch.$id + "/status").set('NEW');
        } else {
          $rootScope.rootRef.child("batches/" + batch.courseId + "/" + batch.mentorId + "/" + batch.$id + "/status").set(status);
        }
        if (status === 'COMPLETED') {
          $rootScope.rootRef.child("batches/" + batch.courseId + "/" + batch.mentorId + "/" + batch.$id).setPriority(status);
        }
        if (status === 'OPEN') {
          batchObj = JSON.parse(angular.toJson(batch));
          delete batchObj.$id;
          delete batchObj.$priority;
          return $rootScope.rootRef.child("batches/index/" + batch.$id).set(batchObj);
        } else {
          return $rootScope.rootRef.child("batches/index/" + batch.$id).set(null);
        }
      };
      $scope.layoutTab.boot = function() {
        $scope.layoutTab.batchesIndex = $firebaseArray($rootScope.rootRef.child("batches/index"));
        return $scope.layoutTab.batchesIndex.$loaded(function(x) {
          return $scope.layoutTab.currentBatch = $scope.layoutTab.batchesIndex[0];
        });
      };
      $scope.guildsTab.boot = function() {
        $scope.guildsTab.guildsIndex = $firebaseArray($rootScope.rootRef.child("guilds/index"));
        $scope.guildsTab.activePane = 'Overview';
        return $scope.guildsTab.guildsIndex.$loaded(function(x) {
          console.log(x);
          $scope.guildsTab.currentGuild = $scope.guildsTab.guildsIndex[0];
          return console.log($scope.guildsTab.currentGuild);
        });
      };
      $scope.guildsTab.createGuild = function() {
        $rootScope.modalHeader = 'New Guild';
        $rootScope.modalContent = $sce.trustAsHtml('Enter a name for your new guild: <br><br> <input name="name" type="text" placeholder="The Ruby Ninjas" class="guild-name form-control bor"/>');
        $rootScope.modalButtonText = 'Create';
        $rootScope.enableModal = true;
        return $rootScope.onModalButtonClick = function(e) {
          var guild, guildCode, guildName, ref;
          e.preventDefault();
          $rootScope.enableModal = false;
          guildName = document.querySelector('.guild-name').value.trim();
          if (guildName.length > 0) {
            ref = $rootScope.rootRef.child('guilds').push();
            guildCode = Math.random().toString(36).substring(10).toUpperCase();
            ref.setWithPriority({
              guildCode: guildCode,
              name: guildName
            }, guildName);
            ref.child("members/" + $rootScope.currentUid).set({
              memberId: $rootScope.currentUid,
              role: 'OWNER'
            });
            $rootScope.currentUserRef.child("guilds/index/" + (ref.key())).set({
              guildId: ref.key(),
              guildName: guildName
            });
            $rootScope.rootRef.child("guilds/index/" + (ref.key())).setWithPriority({
              guildCode: guildCode,
              guildName: guildName
            }, guildName);
            guild = {};
            guild['$id'] = ref.key();
            return $scope.guildsTab.changeGuild(guild);
          }
        };
      };
      $scope.guildsTab.changeGuild = function(guild) {
        if ($scope.guildsTab.currentGuild) {
          $scope.guildsTab.currentGuild.$destroy();
        }
        return $scope.guildsTab.currentGuild = $firebaseObject($rootScope.rootRef.child("guilds/" + guild.$id));
      };
      $timeout(function() {
        $scope.tpl = 'javascripts/app/templates/mentor/guilds.html';
        $scope.guildsTab.boot();
        return $scope.selectedTab = 'GUILDS';
      }, 100);
    }

    return MentorController;

  })();
  MentorController.$inject = ["$scope", "FirebaseService", "$window", "$timeout", "$firebaseObject", "$firebaseArray", "$rootScope", "$sce", "$location"];
  AngApp.controller('MentorController', MentorController);
  return MentorController;
});

//# sourceMappingURL=data:application/json;base64,
