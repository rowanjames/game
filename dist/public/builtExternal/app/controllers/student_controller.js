define(['app/base', 'angularjs', 'fbase'], function(AngApp) {
  var StudentController;
  StudentController = (function() {
    function StudentController($scope, FirebaseService, $window, $timeout, $firebaseObject, $firebaseArray, $rootScope, $sce, $location) {
      $scope.coursesTab = $scope.batchesTab = $scope.questionHoursTab = $scope.appointmentsTab = $scope.paymentsTab = $scope.faqTab = {};
      $scope.coursesTab.boot = function() {
        $scope.selectedTab = 'COURSES';
        $scope.tpl = "javascripts/app/templates/student/courses.html";
        return $rootScope.userBatchesIndex.$loaded(function(x) {
          if (x) {
            $scope.coursesTab.changeCourse(x[0]);
            $scope.paneHeightNumber = $window.innerHeight - document.querySelector('nav').offsetHeight - document.querySelector('.student-dashboard').offsetHeight - document.querySelector('.courses-tab-option-dashboard').offsetHeight;
            $scope.paneHeight = $scope.paneHeightNumber + 'px';
            return $scope.paneStyle = {
              'max-height': $scope.paneHeight,
              'min-height': $scope.paneHeight
            };
          }
        });
      };
      $scope.coursesTab.boot();
      $scope.coursesTab.changeCourse = function(batch) {
        console.log(batch);
        if ($scope.coursesTab.currentCourse) {
          $scope.coursesTab.currentCourse.$destroy();
        }
        $scope.coursesTab.currentCourse = $firebaseObject($rootScope.rootRef.child("courses/" + batch.courseId));
        return $scope.coursesTab.currentCourse.$loaded(function(x) {
          var firstLessonKey, firstProjectKey, firstUnitKey;
          if (x) {
            firstUnitKey = $scope.getFirstKey(x.units);
            if (firstUnitKey) {
              firstLessonKey = $scope.getFirstKey(x.units[firstUnitKey].lessons);
              if (firstLessonKey) {
                $scope.coursesTab.lessonKey = firstLessonKey;
                firstProjectKey = $scope.getFirstKey(x.units[firstUnitKey].lessons[firstLessonKey].projects);
                if (firstProjectKey) {
                  $scope.coursesTab.projectKey = firstProjectKey;
                  return $scope.coursesTab.changeProject(firstUnitKey, firstLessonKey, firstProjectKey, 1, 1, 1);
                } else {
                  $scope.coursesTab.projectHtml = '';
                  return $scope.coursesTab.resetKeys();
                }
              } else {
                $scope.coursesTab.projectHtml = '';
                return $scope.coursesTab.resetKeys();
              }
            } else {
              $scope.coursesTab.projectHtml = '';
              return $scope.coursesTab.resetKeys();
            }
          }
        });
      };
      $scope.coursesTab.changeProject = function(unitKey, lessonKey, projectKey, unitIndex, lessonIndex, projectIndex) {
        $scope.coursesTab.unitKey = unitKey;
        $scope.coursesTab.lessonKey = lessonKey;
        $scope.coursesTab.projectKey = projectKey;
        $scope.coursesTab.unitIndex = unitIndex;
        $scope.coursesTab.lessonIndex = lessonIndex;
        $scope.coursesTab.projectIndex = projectIndex;
        return $scope.coursesTab.projectHtml = $sce.trustAsHtml($scope.coursesTab.currentCourse.units[$scope.coursesTab.unitKey].lessons[$scope.coursesTab.lessonKey].projects[$scope.coursesTab.projectKey].html);
      };
      $scope.coursesTab.resetKeys = function() {
        return $scope.coursesTab.unitKey = $scope.coursesTab.lessonKey = $scope.coursesTab.projectKey = $scope.coursesTab.unitIndex = $scope.coursesTab.lessonIndex = $scope.coursesTab.projectIndex = null;
      };
      $scope.getFirstKey = function(obj) {
        if (obj) {
          return Object.keys(obj)[0];
        }
      };
    }

    return StudentController;

  })();
  StudentController.$inject = ["$scope", "FirebaseService", "$window", "$timeout", "$firebaseObject", "$firebaseArray", "$rootScope", "$sce", "$location"];
  AngApp.controller('StudentController', StudentController);
  return StudentController;
});

//# sourceMappingURL=data:application/json;base64,
